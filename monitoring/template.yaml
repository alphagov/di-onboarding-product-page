AWSTemplateFormatVersion: "2010-09-09"
Transform: AWS::Serverless-2016-10-31
Description: DI product page monitoring

Parameters:
  SlackWebhookParamName:
    Type: String
    Default: canaries-slack-webhook-path

Resources:
  ProductPageCanary:
    Type: AWS::Synthetics::Canary
    Properties:
      Name: di-product-page
      ArtifactS3Location: !Sub "S3://${CanaryResultsBucket}"
      SuccessRetentionPeriod: 1
      FailureRetentionPeriod: 5
      Code:
        Handler: index.handler
        Script: |
          var synthetics = require('Synthetics');
          const log = require('SyntheticsLogger');
          let url = "https://www.sign-in.service.gov.uk/";
          let syntheticsConfig = synthetics.getConfiguration();
          syntheticsConfig.setConfig({
              screenshotOnStepStart : false,
              screenshotOnStepSuccess: false,
              screenshotOnStepFailure: true,
              includeRequestHeaders: true, // Enable if headers should be displayed in HAR
              includeResponseHeaders: true, // Enable if headers should be displayed in HAR
              restrictedHeaders: [], // Value of these headers will be redacted from logs and reports
              restrictedUrlParameters: [] // Values of these url parameters will be redacted from logs and reports
          });
          exports.handler = async () => {
              let page = await synthetics.getPage();
              await synthetics.executeStep('Open product pages', async function (timeoutInMillis = 30000) {
                  await page.goto(url, {waitUntil: ['load', 'networkidle0'], timeout: timeoutInMillis});
              });
          };
      ExecutionRoleArn: !GetAtt CanaryExecutionRole.Arn
      RuntimeVersion: "syn-nodejs-puppeteer-3.6"
      RunConfig:
        TimeoutInSeconds: 59
      Schedule:
        Expression: rate(5 minutes)
      StartCanaryAfterCreation: true

  SnsToSlackFunction:
    # checkov:skip=CKV_AWS_115: "Ensure that AWS Lambda function is configured for function-level concurrent execution limit"
    # checkov:skip=CKV_AWS_117: "Ensure that AWS Lambda function is configured inside a VPC"
    # checkov:skip=CKV_AWS_173: "Check encryption settings for Lambda environmental variable"
    Type: AWS::Serverless::Function
    DependsOn:
      - SlackSnsTopic
    Properties:
      Description: A Lambda function that takes SNS messages and translates them to a form of JSON Slack understands and then sends that JSON to Slack.
      Environment:
        Variables:
          WEBHOOK_PARAMETER_NAME: !Sub ${SlackWebhookParamName}
          SLACK_CHANNEL: "di-dfa-alerts"
      Runtime: nodejs16.x
      Architectures:
        - x86_64
      CodeUri: lambdas/sns-to-slack/
      Handler: snsToSlack.lambdaHandler
      DeadLetterQueue:
        Type: SQS
        TargetArn: !GetAtt SnsToSlackFunctionDeadLetterQueue.Arn
      Policies:
        - Statement:
            - Effect: Allow
              Action:
                - ssm:GetParameter
              Resource:
                - !Sub arn:aws:ssm:${AWS::Region}:${AWS::AccountId}:parameter/${SlackWebhookParamName}

  SnsToSlackFunctionDeadLetterQueue:
    # checkov:skip=CKV_AWS_27: "Ensure all data stored in the SQS queue is encrypted"
    Type: AWS::SQS::Queue
    Properties:
      MessageRetentionPeriod: 259200 # three days

  SlackSnsTopic:
    # checkov:skip=CKV_AWS_26: "Ensure all data stored in the SNS topic is encrypted":
    Type: AWS::SNS::Topic
    Properties:
      DisplayName: DI product page monitoring

  SlackSnsTopicSubscription:
    Type: AWS::SNS::Subscription
    DependsOn:
      - SlackSnsTopic
      - SnsToSlackFunction
    Properties:
      Protocol: lambda
      TopicArn: !Ref SlackSnsTopic
      Endpoint: !GetAtt SnsToSlackFunction.Arn

  SnsToSlackFunctionPermission:
    Type: AWS::Lambda::Permission
    Properties:
      Action: lambda:InvokeFunction
      FunctionName: !GetAtt SnsToSlackFunction.Arn
      Principal: sns.amazonaws.com
      SourceArn: !Ref SlackSnsTopic

  CanaryResultsBucket:
    # checkov:skip=CKV_AWS_18: "Ensure the S3 bucket has access logging enabled"
    # checkov:skip=CKV_AWS_19: "Ensure the S3 bucket has server-side-encryption enabled"
    # checkov:skip=CKV_AWS_21: "Ensure the S3 bucket has versioning enabled"
    Type: AWS::S3::Bucket
    Properties:
      AccessControl: Private
      PublicAccessBlockConfiguration:
        RestrictPublicBuckets: true
        BlockPublicPolicy: true
        IgnorePublicAcls: true
        BlockPublicAcls: true
      LifecycleConfiguration:
        Rules:
          - Id: RemoveOldObjects
            Status: Enabled
            ExpirationInDays: 7

  CanaryLogGroup:
    # checkov:skip=CKV_AWS_158: "Ensure that CloudWatch Log Group is encrypted by KMS"
    Type: AWS::Logs::LogGroup
    Properties:
      RetentionInDays: 30

  CanaryExecutionRole:
    Type: AWS::IAM::Role
    DependsOn:
      - CanaryLogGroup
      - CanaryResultsBucket
    Properties:
      AssumeRolePolicyDocument:
        Version: "2012-10-17"
        Statement:
          - Effect: Allow
            Principal:
              Service:
                - lambda.amazonaws.com
            Action:
              - sts:AssumeRole
      Policies:
        - PolicyName: CanaryPolicy
          PolicyDocument:
            Version: "2012-10-17"
            Statement:
              - Effect: Allow
                Action:
                  - s3:PutObject
                  - s3:GetObject
                Resource: !Sub ${CanaryResultsBucket.Arn}/*

              - Effect: Allow
                Action: s3:GetBucketLocation
                Resource: !GetAtt CanaryResultsBucket.Arn

              - Effect: Allow
                Action:
                  - logs:CreateLogGroup
                  - logs:CreateLogStream
                  - logs:PutLogEvents
                Resource: !GetAtt CanaryLogGroup.Arn

              - Effect: Allow
                Action: s3:ListAllMyBuckets
                Resource: "*"

              - Effect: Allow
                Action: cloudwatch:PutMetricData
                Condition:
                  StringEquals:
                    "cloudwatch:namespace": "CloudWatchSynthetics"
                Resource: "*"

  ProductPageCanaryAlarm:
    DependsOn:
      - ProductPageCanary
    Type: AWS::CloudWatch::Alarm
    Properties:
      AlarmDescription: "Product page canary: 2 failures in the last 5 periods"
      AlarmActions:
        - !Ref SlackSnsTopic
      OKActions:
        - !Ref SlackSnsTopic

      ComparisonOperator: GreaterThanOrEqualToThreshold
      Statistic: Sum
      Threshold: 1
      Period: 300
      EvaluationPeriods: 1
      DatapointsToAlarm: 1
      TreatMissingData: notBreaching # The metric is only reported when a test fails. So missing data means the tests aren't failing

      MetricName: Failed
      Namespace: CloudWatchSynthetics
      Dimensions:
        - Name: CanaryName
          Value: di-product-page-canary
