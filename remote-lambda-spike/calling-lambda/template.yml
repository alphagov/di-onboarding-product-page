AWSTemplateFormatVersion: '2010-09-09'
Transform: AWS::Serverless-2016-10-31
Description: >
  a stack with a lambda that calls a different lambda in a different account.
  The lambda needs to permission to assume the role in the other account

Parameters:
  RoleArn:
    Type: String
    Description: ARN of the remote role to assume
  FunctionName:
    Type: String
    Description: The ARN of the function to call - function name probably works too.

Resources:
  CallingFunction:
    Type: AWS::Serverless::Function
    DependsOn: AssumeRolePolicy
    Properties:
      Handler: index.handler
      Runtime: nodejs14.x
      Environment:
        Variables:
          FUNCTION_NAME: !Ref FunctionName
          ROLE_ARN: !Ref RoleArn
      InlineCode: |
        let aws = require('aws-sdk');
        exports.handler = async function(event, context) {
          var sts = new aws.STS({ region: process.env.REGION });
          var stsParams = {
            RoleArn: process.env.ROLE_ARN,
            DurationSeconds: 3600,
            RoleSessionName: "MySession"
          };
          const stsResults = await sts.assumeRole(stsParams).promise();
          console.log(stsResults); // probably not in prod ;)
        
          var lambda = new aws.Lambda({
              region: process.env.REGION,
              accessKeyId: stsResults.Credentials.AccessKeyId,
              secretAccessKey:stsResults.Credentials.SecretAccessKey,
              sessionToken: stsResults.Credentials.SessionToken
          });
        
          const result = await lambda.invoke({
            FunctionName: process.env.FUNCTION_NAME,
            InvocationType: 'RequestResponse',
            Payload: JSON.stringify(event) // pass params
          }).promise();
          
          console.log("The result was: " + JSON.stringify(result));
          
          const response = {
            statusCode: 200,
            body: result.Payload
          };
          return response;
        }
      Role: !GetAtt AssumeRolePolicy.Arn

  AssumeRolePolicy:
    Type: AWS::IAM::Role
    Properties:
      AssumeRolePolicyDocument:
        {
          "Version": "2012-10-17",
          "Statement": [
            {
              "Effect": "Allow",
              "Principal": {
                "Service": "lambda.amazonaws.com"
              },
              "Action": "sts:AssumeRole"
            }
          ]
        }
      Policies:
          - PolicyName: AssumeRoleInOtherAccount
            PolicyDocument:
              {
              "Version": "2012-10-17",
              "Statement": [
                {
                  "Sid": "stsassumerole",
                  "Effect": "Allow",
                  "Action": "sts:AssumeRole",
                  "Resource": !Ref RoleArn
                },
                { # Logging permissions are necessary for any lambda.  Probably there's a SAM role that covers this and can have the assumerole stuff appended.
                  "Sid": "logsstreamevent",
                  "Effect": "Allow",
                  "Action": [
                      "logs:CreateLogStream",
                      "logs:PutLogEvents"
                  ],
                  "Resource": "arn:aws:logs:eu-west-2:494650018671:log-group:/aws/lambda/Lambda-Assume-Roles*/*" # Not sure about this - it works but maybe should be a different resource
                },
                {
                  "Sid": "logsgroup",
                  "Effect": "Allow",
                  "Action": "logs:CreateLogGroup",
                  "Resource": "*"
                }
              ]
            }
      Description: Allows lambda to assume a role in another account
